<?php

/**
 * @file
 * Custom Module to enhance the CK EDITOR WYSIWYG experience
 *
 * for more info, see: 
 *    http://drupal.org/project/wysiwyg
 *    http://drupal.org/node/358316 
 * 
 */
  
 /**
 * Implementation of hook_wysiwyg_editor_settings_alter().
 *
 * This hook is invoked from wysiwyg_get_editor_config() after the JavaScript
 * settings have been generated for an editor profile and before the settings
 * are added to the page. The settings may be customized or enhanced; typically
 * with options that cannot be controlled through Wysiwyg module's
 * administrative UI currently.
 *
 * Modules implementing this hook to enforce settings that can also be
 * controlled through the UI should also implement
 * hook_form_wysiwyg_profile_form_alter() to adjust or at least indicate on the
 * editor profile configuration form that certain/affected settings cannot be
 * changed.
 *
 * @param $settings
 *   An associative array of JavaScript settings to pass to the editor.
 * @param $context
 *   An associative array containing additional context information:
 *   - editor: The plugin definition array of the editor.
 *   - profile: The editor profile object, as loaded from the database.
 *   - theme: The name of the editor theme/skin.
 * 
 * Since wysiwyg 2.1, you can use the wysiwyg_editor_settings_alter hook to add custom settings.
 * Here, we load a custom config file for wysiwyg fields to set our own variables:
 */

function ck_wysiwyg_tweaks_wysiwyg_editor_settings_alter(&$settings, $context) {
  
  if ($context['profile']->editor == 'ckeditor') {
    
    
    // Example of setting customConfig option. Just note it gets overridden by values in $settings.
    $settings['customConfig'] = base_path() . drupal_get_path('module', 'ck_wysiwyg_tweaks') .'/ckeditor-config.js';
    
  }
}

/**
 * Implementation of hook_wysiwyg_plugin().
 *
 * This is the preferred method for loading a plugin
 */

/*
function ck_wysiwyg_tweaks_wysiwyg_plugin($editor, $version) {
  //plugin stuff
}
*/
